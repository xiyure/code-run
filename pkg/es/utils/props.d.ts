declare const camelize: (str: string) => any;
declare const parseStyleText: (cssText?: string, camel?: boolean) => any;
declare const hasProp: (instance: any, prop: string) => boolean;
export declare const skipFlattenKey: unique symbol;
declare const flattenChildren: (children?: any[], filterEmpty?: boolean) => any[];
declare const getSlot: (self: any, name?: string, options?: {}) => any[];
declare const findDOMNode: (instance: any) => any;
declare const getComponent: (instance: any, prop?: string, options?: any, execute?: boolean) => any;
declare const getKey: (ele: any) => any;
export declare function getStyle(ele: any, camel?: boolean): any;
export declare function getComponentName(opts: any): any;
export declare function isFragment(c: any): boolean;
export declare function isEmptyContent(c: any): boolean;
export declare function isEmptyElement(c: any): any;
export declare function isEmptySlot(c: any): any;
export declare function isStringElement(c: any): any;
export declare function filterEmpty(children?: any[]): any[];
export declare function filterEmptyWithUndefined(children: any[]): any[] | undefined;
declare function isValidElement(element: any): any;
declare function getPropsSlot(slots: any, props: any, prop?: string): any;
export declare const getTextFromElement: (ele: any) => any;
declare function isResponsiveData(data: any): boolean;
export { hasProp, getComponent, getKey, parseStyleText, isValidElement, camelize, getSlot, findDOMNode, flattenChildren, getPropsSlot, isResponsiveData };
export default hasProp;
